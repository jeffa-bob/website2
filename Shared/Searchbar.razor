@inject NavigationManager Nav
@inject HttpClient Http

<div>
  <BlazoredTypeahead SearchMethod="Searchmodels"
                     @bind-Value="Selectedmod">
    <SelectedTemplate>
      @context.title
    </SelectedTemplate>
    <ResultTemplate>
      <h3>@context.title</h3> @TruncateForDisplay(context.desc, 10)
    </ResultTemplate>
  </BlazoredTypeahead>
</div>

@code {
  modeles _Selectedmod;
  modeles Selectedmod { get { return _Selectedmod; } set { Nav.NavigateTo($"/bees/{value.title}/"); _Selectedmod = value; } }

  List<modeles> models = new List<modeles>();

  private async Task<IEnumerable<modeles>> Searchmodels(string searchText)
  {
    return await Task.FromResult(models.Where(x => x.title.ToLower().Contains(searchText.ToLower()) || x.desc.ToLower().Contains(searchText.ToLower())).ToList());
  }


  protected override async Task OnInitializedAsync()
  {
    modeles[] _models = await Http.GetFromJsonAsync<modeles[]>("data/models.json");
    models = _models.ToList();
  }

  public class modeles
  {
    public DateTime data { get; set; }

    public string title { get; set; }

    public string modelpath { get; set; }

    public string desc { get; set; }
  }

  private string TruncateForDisplay(string value, int length)
  {
    if (string.IsNullOrEmpty(value)) return string.Empty;
    var returnValue = value;
    if (value.Length > length)
    {
      var tmp = value.Substring(0, length);
      if (tmp.LastIndexOf(' ') > 0)
        returnValue = tmp.Substring(0, tmp.LastIndexOf(' ')) + " ...";
    }
    return returnValue;
  }
}
